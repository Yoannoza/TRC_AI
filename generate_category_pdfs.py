#!/usr/bin/env python3
"""
G√©n√©rateur de PDFs par cat√©gorie pour le dataset de d√©chets de comp√©tition robotique.

Ce script prend les images organis√©es par cat√©gories et zones et g√©n√®re des PDFs
avec chaque image r√©p√©t√©e 6 fois par ligne en format 3x3cm pour faciliter le d√©coupage.

Structure:
- Page 1: R√©capitulatif de la cat√©gorie (DESIGN AM√âLIOR√â)
- Pages suivantes: Images avec 6 copies par ligne, une ligne par type de d√©chet

Auteur: Assistant IA
Date: 19 septembre 2025
"""

import os
import logging
from pathlib import Path
from typing import List, Dict, Tuple
from collections import defaultdict
import json
from datetime import datetime

# Imports pour la g√©n√©ration PDF et traitement d'images
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
from reportlab.lib.colors import black, white, blue, green, red
from reportlab.platypus.flowables import Image as ReportLabImage
from reportlab.lib import colors
from PIL import Image, ImageDraw, ImageFont
import requests
from io import BytesIO

# Configuration de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('category_pdf_generation.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CategoryPDFGenerator:
    """G√©n√©rateur de PDFs par cat√©gorie avec images r√©p√©t√©es."""
    
    def __init__(self, images_dir: str, output_dir: str = "category_pdfs"):
        """
        Initialise le g√©n√©rateur.
        
        Args:
            images_dir: Dossier contenant les images organis√©es par cat√©gories
            output_dir: Dossier de sortie pour les PDFs
        """
        self.images_dir = Path(images_dir)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # Configuration PDF
        self.page_width, self.page_height = A4
        self.margin = 1.5 * cm
        self.image_size = 3 * cm  # 3x3 cm comme sp√©cifi√©
        self.images_per_row = 6   # 6 copies par ligne
        self.dpi = 300            # Qualit√© d'image
        
        # Styles am√©lior√©s avec typographie moderne
        self.styles = getSampleStyleSheet()
        
        # Style pour le header TRC 2025
        self.header_style = ParagraphStyle(
            'TRCHeader',
            parent=self.styles['Normal'],
            fontSize=14,
            fontName='Helvetica-Bold',
            textColor=colors.darkblue,
            alignment=TA_CENTER,
            spaceAfter=5
        )
        
        # Style titre principal - plus moderne
        self.main_title_style = ParagraphStyle(
            'MainTitle',
            parent=self.styles['Heading1'],
            fontSize=32,
            fontName='Helvetica-Bold',
            textColor=colors.darkblue,
            alignment=TA_CENTER,
            spaceAfter=10,
            leading=36
        )
        
        # Style sous-titre √©l√©gant
        self.elegant_subtitle_style = ParagraphStyle(
            'ElegantSubtitle',
            parent=self.styles['Normal'],
            fontSize=18,
            fontName='Helvetica',
            textColor=colors.grey,
            alignment=TA_CENTER,
            spaceAfter=25,
            leading=22
        )
        
        # Style pour les sections avec couleur et bordure moderne
        self.section_title_style = ParagraphStyle(
            'SectionTitle',
            parent=self.styles['Heading2'],
            fontSize=16,
            fontName='Helvetica-Bold',
            textColor=colors.white,
            alignment=TA_CENTER,
            spaceAfter=12,
            spaceBefore=20,
            borderWidth=1,
            borderColor=colors.darkblue,
            borderPadding=12,
            backColor=colors.darkblue,
            leading=20
        )
        
        # Style pour le contenu des sections
        self.section_content_style = ParagraphStyle(
            'SectionContent',
            parent=self.styles['Normal'],
            fontSize=11,
            fontName='Helvetica',
            textColor=colors.black,
            alignment=TA_LEFT,
            spaceAfter=8,
            leading=14,
            leftIndent=10
        )
        
        # Style pour les statistiques
        self.stats_style = ParagraphStyle(
            'StatsStyle',
            parent=self.styles['Normal'],
            fontSize=12,
            fontName='Helvetica-Bold',
            textColor=colors.darkgreen,
            alignment=TA_CENTER,
            spaceAfter=6
        )
        
        # Style pour les instructions √©tap√©es
        self.instruction_title_style = ParagraphStyle(
            'InstructionTitle',
            parent=self.styles['Normal'],
            fontSize=13,
            fontName='Helvetica-Bold',
            textColor=colors.darkred,
            alignment=TA_LEFT,
            spaceAfter=5,
            spaceBefore=8
        )
        
        self.instruction_content_style = ParagraphStyle(
            'InstructionContent',
            parent=self.styles['Normal'],
            fontSize=10,
            fontName='Helvetica',
            textColor=colors.black,
            alignment=TA_LEFT,
            spaceAfter=3,
            leftIndent=15,
            bulletIndent=10
        )
        
        # Mapping des cat√©gories en fran√ßais
        self.category_names = {
            'recyclables': 'D√©chets Recyclables',
            'menagers': 'D√©chets M√©nagers',
            'dangereux': 'D√©chets Dangereux'
        }
        
        self.category_colors = {
            'recyclables': colors.darkgreen,
            'menagers': colors.darkblue,
            'dangereux': colors.darkred
        }
        
        self.category_bg_colors = {
            'recyclables': colors.lightgreen,
            'menagers': colors.lightblue,
            'dangereux': colors.mistyrose
        }
        
        logger.info(f"G√©n√©rateur initialis√© - Images: {self.images_dir}, Sortie: {self.output_dir}")
    
    def scan_images_by_category(self) -> Dict[str, Dict[str, List[Path]]]:
        """
        Scanne les images organis√©es par cat√©gories et zones.
        
        Returns:
            Dictionnaire {cat√©gorie: {zone: [fichiers]}}
        """
        logger.info("Scan des images par cat√©gorie...")
        
        images_by_category = defaultdict(lambda: defaultdict(list))
        
        for category_dir in self.images_dir.iterdir():
            if category_dir.is_dir() and category_dir.name in self.category_names:
                category = category_dir.name
                logger.info(f"Traitement de la cat√©gorie: {category}")
                
                for zone_dir in category_dir.iterdir():
                    if zone_dir.is_dir():
                        zone = zone_dir.name
                        image_files = [f for f in zone_dir.iterdir() 
                                     if f.suffix.lower() in ['.jpg', '.jpeg', '.png']]
                        images_by_category[category][zone].extend(image_files)
                        logger.info(f"  Zone {zone}: {len(image_files)} images")
        
        return dict(images_by_category)
    
    def create_header_section(self) -> List:
        """Cr√©e la section d'en-t√™te avec logo et informations de comp√©tition."""
        elements = []
        
        # En-t√™te TRC 2025
        header_text = "TEKBOT ROBOTICS CHALLENGE 2025"
        header = Paragraph(header_text, self.header_style)
        elements.append(header)
        
        # Sous-titre comp√©tition
        competition_subtitle = "Dataset Officiel d'Entra√Ænement - Tri Automatis√© de D√©chets"
        subtitle = Paragraph(competition_subtitle, self.elegant_subtitle_style)
        elements.append(subtitle)
        elements.append(Spacer(1, 20))
        
        return elements
    
    def create_category_banner(self, category: str) -> List:
        """Cr√©e une banni√®re color√©e pour la cat√©gorie."""
        elements = []
        
        category_title = self.category_names.get(category, category.title())
        category_icons = {
            'recyclables': '‚ôªÔ∏è',
            'menagers': 'üóëÔ∏è', 
            'dangereux': '‚ò¢Ô∏è'
        }
        icon = category_icons.get(category, 'üì¶')
        
        # Cr√©er un style personnalis√© pour cette cat√©gorie
        category_banner_style = ParagraphStyle(
            'CategoryBanner',
            parent=self.main_title_style,
            textColor=self.category_colors.get(category, colors.black),
            backColor=self.category_bg_colors.get(category, colors.lightgrey),
            borderWidth=2,
            borderColor=self.category_colors.get(category, colors.black),
            borderPadding=15
        )
        
        banner_text = f"{icon} {category_title.upper()}"
        banner = Paragraph(banner_text, category_banner_style)
        elements.append(banner)
        elements.append(Spacer(1, 25))
        
        return elements
    
    def create_info_box(self, category: str, images_data: Dict[str, List[Path]]) -> List:
        """Cr√©e une bo√Æte d'information g√©n√©rale √©l√©gante."""
        elements = []
        
        # Calculs pour la bo√Æte info
        total_images = sum(len(images) for images in images_data.values())
        all_waste_types = set()
        for images in images_data.values():
            for img in images:
                waste_type = img.stem.split('_')[-1]
                all_waste_types.add(waste_type)
        total_types = len(all_waste_types)
        
        # Cr√©er une bo√Æte d'information visuelle
        info_data = [[
            f"üéØ CAT√âGORIE\n{self.category_names.get(category, category.title())}",
            f"üìä DATASET\n{total_images} images\n{total_types} types",
            f"üé≤ PRODUCTION\n{total_types * 6} cubes\npossibles",
            f"‚öôÔ∏è FORMAT\n3√ó3 cm\nPr√™t √† d√©couper"
        ]]
        
        info_table = Table(info_data, colWidths=[3.7*cm, 3.7*cm, 3.7*cm, 3.7*cm])
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), self.category_bg_colors.get(category, colors.lightgrey)),
            ('TEXTCOLOR', (0, 0), (-1, -1), self.category_colors.get(category, colors.black)),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 2, self.category_colors.get(category, colors.black)),
            ('TOPPADDING', (0, 0), (-1, -1), 12),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ('LEFTPADDING', (0, 0), (-1, -1), 8),
            ('RIGHTPADDING', (0, 0), (-1, -1), 8),
            ('LEADING', (0, 0), (-1, -1), 14),
        ]))
        
        elements.append(info_table)
        elements.append(Spacer(1, 25))
        
        return elements
    
    def create_stats_section(self, category: str, images_data: Dict[str, List[Path]]) -> List:
        """Cr√©e la section statistiques avec design moderne."""
        elements = []
        
        # Titre de section
        section_title = Paragraph("üìä STATISTIQUES DU DATASET", self.section_title_style)
        elements.append(section_title)
        
        # Calculs statistiques
        total_images = sum(len(images) for images in images_data.values())
        all_waste_types = set()
        for images in images_data.values():
            for img in images:
                waste_type = img.stem.split('_')[-1]
                all_waste_types.add(waste_type)
        total_types = len(all_waste_types)
        
        # Cr√©er un tableau de statistiques visuellement attrayant
        stats_data = [
            ['üìä M√âTRIQUE', 'üî¢ VALEUR', 'üìù DESCRIPTION'],
            ['Images Totales', str(total_images), 'Images disponibles pour entra√Ænement'],
            ['Types de D√©chets', str(total_types), 'Classes distinctes de d√©chets'],
            ['Environnements', str(len(images_data)), 'Contextes de collecte diff√©rents'],
            ['Cubes Possibles', str(total_types * 6), 'Cubes fabricables (6 copies/type)'],
            ['Format Standard', '3√ó3 cm', 'Taille optimale pour cubes robotiques'],
            ['Qualit√© Dataset', 'Haute', 'Images valid√©es pour comp√©tition']
        ]
        
        stats_table = Table(stats_data, colWidths=[4*cm, 3*cm, 8*cm])
        stats_table.setStyle(TableStyle([
            # En-t√™te
            ('BACKGROUND', (0, 0), (-1, 0), self.category_colors.get(category, colors.grey)),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            
            # Corps du tableau
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            
            # Alternance de couleurs
            ('BACKGROUND', (0, 2), (-1, 2), colors.lightcyan),
            ('BACKGROUND', (0, 4), (-1, 4), colors.lightcyan),
            ('BACKGROUND', (0, 6), (-1, 6), colors.lightcyan),
            
            # Padding
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
        ]))
        
        elements.append(stats_table)
        elements.append(Spacer(1, 20))
        
        return elements
    
    def create_environment_section(self, images_data: Dict[str, List[Path]]) -> List:
        """Cr√©e la section r√©partition par environnement."""
        elements = []
        
        # Titre de section
        section_title = Paragraph("üåç R√âPARTITION PAR ENVIRONNEMENT", self.section_title_style)
        elements.append(section_title)
        
        # Tableau environnements avec design am√©lior√©
        env_data = [['üè¢ ENVIRONNEMENT', 'üìä IMAGES', 'üóÇÔ∏è TYPES', 'üìã √âCHANTILLONS']]
        
        zone_icons = {
            'residentielle': 'üè†',
            'commerciale': 'üè¢',
            'industrielle': 'üè≠'
        }
        
        for zone, images in images_data.items():
            zone_waste_types = set(img.stem.split('_')[-1] for img in images)
            icon = zone_icons.get(zone, 'üìç')
            examples = ', '.join(sorted(list(zone_waste_types))[:4])
            if len(zone_waste_types) > 4:
                examples += '...'
            
            env_data.append([
                f"{icon} {zone.title()}",
                str(len(images)),
                str(len(zone_waste_types)),
                examples
            ])
        
        env_table = Table(env_data, colWidths=[4*cm, 2.5*cm, 2.5*cm, 6*cm])
        env_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightsteelblue),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('TOPPADDING', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ]))
        
        elements.append(env_table)
        elements.append(Spacer(1, 20))
        
        return elements
    
    def create_instructions_section(self) -> List:
        """Cr√©e la section instructions avec design √©tap√© moderne."""
        elements = []
        
        # Titre de section
        section_title = Paragraph("üîß GUIDE D'UTILISATION COMP√âTITION", self.section_title_style)
        elements.append(section_title)
        
        # Instructions √©tap√©es avec design moderne
        instructions = [
            ("üñ®Ô∏è √âTAPE 1 - IMPRESSION PROFESSIONNELLE", [
                "‚Ä¢ Utilisez du papier photo 200g minimum ou carton fin",
                "‚Ä¢ R√©glez l'imprimante sur 'Taille r√©elle' (100% - pas d'ajustement)",
                "‚Ä¢ Qualit√© d'impression : Maximum/Photo",
                "‚Ä¢ Mode couleur obligatoire pour reconnaissance optimale"
            ]),
            ("‚úÇÔ∏è √âTAPE 2 - D√âCOUPAGE DE PR√âCISION", [
                "‚Ä¢ Chaque image mesure exactement 3√ó3 cm",
                "‚Ä¢ Utilisez une r√®gle m√©tallique et un cutter neuf",
                "‚Ä¢ D√©coupez ligne par ligne pour maintenir l'organisation",
                "‚Ä¢ Conservez les chutes pour tester l'adh√©sion"
            ]),
            ("üé≤ √âTAPE 3 - ASSEMBLAGE DES CUBES", [
                "‚Ä¢ Nettoyez les faces des cubes avec alcool isopropylique",
                "‚Ä¢ Utilisez colle forte ou adh√©sif double-face haute tenue",
                "‚Ä¢ Centrez parfaitement chaque image (marges √©gales)",
                "‚Ä¢ Pressez fermement 30 secondes, laissez s√©cher 5 minutes"
            ]),
            ("ü§ñ √âTAPE 4 - UTILISATION EN COMP√âTITION", [
                "‚Ä¢ Une cat√©gorie = une mission de tri sp√©cifique",
                "‚Ä¢ 6 copies par type permettent tests r√©p√©t√©s et backup",
                "‚Ä¢ M√©langez al√©atoirement pour √©valuation r√©aliste",
                "‚Ä¢ Documentez taux de reconnaissance de votre IA",
                "‚Ä¢ Testez sous diff√©rents √©clairages et angles"
            ])
        ]
        
        for step_title, step_content in instructions:
            # Titre de l'√©tape
            title_para = Paragraph(step_title, self.instruction_title_style)
            elements.append(title_para)
            
            # Contenu de l'√©tape
            for item in step_content:
                item_para = Paragraph(item, self.instruction_content_style)
                elements.append(item_para)
            
            elements.append(Spacer(1, 12))
        
        return elements
    
    def create_footer_section(self) -> List:
        """Cr√©e le pied de page avec informations de g√©n√©ration."""
        elements = []
        
        elements.append(Spacer(1, 15))
        
        # Ligne de s√©paration
        separator_style = ParagraphStyle(
            'Separator',
            parent=self.styles['Normal'],
            fontSize=1,
            textColor=colors.grey,
            alignment=TA_CENTER
        )
        separator = Paragraph("_" * 80, separator_style)
        elements.append(separator)
        elements.append(Spacer(1, 10))
        
        # Informations de g√©n√©ration
        footer_text = f"""
        <b>üìÖ Document g√©n√©r√© le :</b> {datetime.now().strftime('%d/%m/%Y √† %H:%M')}<br/>
        <b>üèÜ Comp√©tition :</b> Tekbot Robotics Challenge 2025 (TRC 2025)<br/>
        <b>‚öôÔ∏è Version dataset :</b> 1.0 - Tri automatis√© de d√©chets<br/>
        <b>üìß Support :</b> Consultez les r√®gles officielles TRC 2025
        """
        
        footer_style = ParagraphStyle(
            'Footer',
            parent=self.styles['Normal'],
            fontSize=9,
            fontName='Helvetica',
            textColor=colors.grey,
            alignment=TA_CENTER,
            leading=12
        )
        
        footer_para = Paragraph(footer_text, footer_style)
        elements.append(footer_para)
        
        return elements
    
    def create_summary_page(self, category: str, images_data: Dict[str, List[Path]]) -> List:
        """
        Cr√©e la page de r√©capitulatif avec design professionnel am√©lior√©.
        
        Args:
            category: Nom de la cat√©gorie
            images_data: Donn√©es des images par zone
            
        Returns:
            Liste des √©l√©ments pour la page
        """
        story = []
        
        # 1. Header avec informations TRC 2025
        story.extend(self.create_header_section())
        
        # 2. Banni√®re cat√©gorie
        story.extend(self.create_category_banner(category))
        
        # 2.5. Bo√Æte d'information rapide
        story.extend(self.create_info_box(category, images_data))
        
        # 3. Section statistiques
        story.extend(self.create_stats_section(category, images_data))
        
        # 4. Section environnements
        story.extend(self.create_environment_section(images_data))
        
        # 5. Section instructions
        story.extend(self.create_instructions_section())
        
        # 6. Footer
        story.extend(self.create_footer_section())
        
        return story
    
    def create_image_row(self, image_path: Path) -> Table:
        """
        Cr√©e une ligne avec 6 copies de la m√™me image avec bordures en pointill√©s.
        
        Args:
            image_path: Chemin vers l'image
            
        Returns:
            Table avec 6 copies de l'image
        """
        try:
            # Cr√©er 6 objets Image pour ReportLab directement √† partir du fichier original
            images = []
            for _ in range(self.images_per_row):
                rl_image = ReportLabImage(str(image_path), width=self.image_size, height=self.image_size)
                images.append(rl_image)
            
            # Cr√©er le tableau avec les 6 images et espacement
            table = Table([images], colWidths=[self.image_size] * self.images_per_row)
            table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ('LEFTPADDING', (0, 0), (-1, -1), 4),   # Espacement entre les images
                ('RIGHTPADDING', (0, 0), (-1, -1), 4),  # Espacement entre les images
                ('TOPPADDING', (0, 0), (-1, -1), 4),    # Espacement vertical
                ('BOTTOMPADDING', (0, 0), (-1, -1), 4), # Espacement vertical
                # Bordures en pointill√©s pour chaque cellule d'image
                ('LINEBELOW', (0, 0), (-1, -1), 1, colors.grey, None, (2, 2)),  # Ligne pointill√©e en bas
                ('LINEABOVE', (0, 0), (-1, -1), 1, colors.grey, None, (2, 2)),  # Ligne pointill√©e en haut
                ('LINEBEFORE', (0, 0), (-1, -1), 1, colors.grey, None, (2, 2)), # Ligne pointill√©e √† gauche
                ('LINEAFTER', (0, 0), (-1, -1), 1, colors.grey, None, (2, 2)),  # Ligne pointill√©e √† droite
            ]))
            
            return table
            
        except Exception as e:
            logger.error(f"Erreur lors de la cr√©ation de la ligne pour {image_path}: {e}")
            return None
    
    def generate_category_pdf(self, category: str, images_data: Dict[str, List[Path]]):
        """
        G√©n√®re le PDF pour une cat√©gorie.
        
        Args:
            category: Nom de la cat√©gorie
            images_data: Donn√©es des images par zone
        """
        logger.info(f"G√©n√©ration du PDF pour la cat√©gorie: {category}")
        
        # Nom du fichier PDF
        pdf_filename = f"TRC2025_{category}_cubes_robotique.pdf"
        pdf_path = self.output_dir / pdf_filename
        
        # Cr√©er le document PDF
        doc = SimpleDocTemplate(
            str(pdf_path),
            pagesize=A4,
            rightMargin=self.margin,
            leftMargin=self.margin,
            topMargin=self.margin,
            bottomMargin=self.margin,
            title=f"TRC 2025 - Dataset {self.category_names.get(category, category)}",
            author="Tekbot Robotics Challenge 2025",
            subject="Dataset d'entra√Ænement pour tri automatis√© de d√©chets"
        )
        
        story = []
        
        # Page de r√©capitulatif avec nouveau design
        summary_elements = self.create_summary_page(category, images_data)
        story.extend(summary_elements)
        story.append(PageBreak())
        
        # Pages avec les images (inchang√©es)
        all_images = []
        for zone, images in images_data.items():
            all_images.extend(images)
        
        # Grouper les images par type de d√©chet
        images_by_type = defaultdict(list)
        for img in all_images:
            waste_type = img.stem.split('_')[-1]  # Derni√®re partie du nom
            images_by_type[waste_type].append(img)
        
        # Titre pour les pages d'images
        images_title_style = ParagraphStyle(
            'ImagesTitle',
            parent=self.section_title_style,
            textColor=self.category_colors.get(category, colors.black)
        )
        images_title = Paragraph(f"üñºÔ∏è Images √† d√©couper - {self.category_names.get(category, category.title())}", images_title_style)
        story.append(images_title)
        story.append(Spacer(1, 15))
        
        # Cr√©er une ligne par type de d√©chet
        for waste_type, type_images in sorted(images_by_type.items()):
            # Prendre la premi√®re image de ce type (elles devraient √™tre similaires)
            representative_image = type_images[0]
            
            # Cr√©er la ligne avec 6 copies
            image_row = self.create_image_row(representative_image)
            if image_row:
                story.append(image_row)
                story.append(Spacer(1, 8))  # Espacement entre les lignes d'images
        
        # G√©n√©rer le PDF
        try:
            doc.build(story)
            logger.info(f"‚úÖ PDF g√©n√©r√© avec succ√®s: {pdf_path}")
            return pdf_path
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la g√©n√©ration du PDF {pdf_filename}: {e}")
            return None
    
    def generate_all_pdfs(self):
        """G√©n√®re tous les PDFs pour toutes les cat√©gories."""
        logger.info("üèóÔ∏è D√âBUT DE LA G√âN√âRATION DES PDFs PAR CAT√âGORIE - TRC 2025")
        logger.info("=" * 60)
        
        # Scanner les images
        images_by_category = self.scan_images_by_category()
        
        if not images_by_category:
            logger.error("Aucune image trouv√©e dans la structure de dossiers")
            return
        
        generated_pdfs = []
        
        # G√©n√©rer un PDF par cat√©gorie
        for category, zones_data in images_by_category.items():
            logger.info(f"üìÑ G√©n√©ration du PDF pour: {category}")
            
            pdf_path = self.generate_category_pdf(category, zones_data)
            if pdf_path:
                generated_pdfs.append(pdf_path)
        
        # Rapport final
        logger.info("=" * 60)
        logger.info("üéâ G√âN√âRATION TERMIN√âE - TRC 2025")
        logger.info(f"üìä PDFs g√©n√©r√©s: {len(generated_pdfs)}")
        
        for pdf_path in generated_pdfs:
            file_size = pdf_path.stat().st_size / (1024 * 1024)  # MB
            logger.info(f"   üìÑ {pdf_path.name} ({file_size:.1f} MB)")
        
        logger.info(f"üìÅ Dossier de sortie: {self.output_dir.absolute()}")


def main():
    """Fonction principale."""
    print("üè≠ G√âN√âRATEUR DE PDFs TRC 2025 - DESIGN PROFESSIONNEL")
    print("=" * 60)
    print("G√©n√®re des PDFs avec design am√©lior√© pour la comp√©tition")
    print("Tekbot Robotics Challenge 2025 - Tri automatis√© de d√©chets")
    print("Images 3x3cm r√©p√©t√©es 6 fois par ligne pour cubes robotiques")
    print()
    
    # Configuration
    images_dir = "competition_waste_dataset/images"
    output_dir = "category_pdfs"
    
    # V√©rifier que le dossier d'images existe
    if not Path(images_dir).exists():
        print(f"‚ùå Erreur: Le dossier {images_dir} n'existe pas")
        print("Assurez-vous d'avoir ex√©cut√© organize_images.py d'abord")
        return
    
    # Cr√©er le g√©n√©rateur
    generator = CategoryPDFGenerator(images_dir, output_dir)
    
    # G√©n√©rer tous les PDFs
    generator.generate_all_pdfs()
    
    print(f"\n‚úÖ G√©n√©ration termin√©e!")
    print(f"üìÅ V√©rifiez le dossier: {output_dir}")
    print("üèÜ Pr√™t pour la Tekbot Robotics Challenge 2025!")


if __name__ == "__main__":
    main()